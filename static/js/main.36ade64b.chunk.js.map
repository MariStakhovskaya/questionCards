{"version":3,"sources":["features/Packs/PacksList.module.css","features/Cards/CardsList.module.css","features/Profile/Modal.module.css","common/Error404/Error404.module.css","App.module.css","common/Header/Header.module.css","common/Paginator/Pagination.module.css","common/assets/cpLogo.png","common/Preloader/Ellipsis.gif","features/Profile/Profile.module.css","common/assets/404.png","common/assets/4698238.png","common/Logo.tsx","common/Header/Header.tsx","api/cards-api.ts","features/Profile/profile-reducer.ts","features/Login/login-reducer.ts","app/app-reducer.ts","common/Preloader/Preloader.tsx","common/EditableSpan.tsx","features/Profile/ModalProfile.tsx","features/Profile/Profile.tsx","features/Login/Login.tsx","features/Registration/regist-reducer.ts","features/Registration/Registration.tsx","features/ResetPassword/reset-reducer.ts","features/ResetPassword/Reset.tsx","common/Error404/Page404.tsx","features/ForgotPassword/forgotPassword-reducer.ts","features/ForgotPassword/ForgotPassword.tsx","features/Packs/packs-reducer.ts","common/Paginator/Pagination.tsx","features/Packs/PacksList.tsx","features/Cards/cards-reducer.ts","features/Cards/CardsList.tsx","app/Routes/AllRoutes.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","packsListBlock","tablePacksList","tableRowPacksList","packsListLeft","packsListRight","btnPacksList","active","defaultButton1","cardsListBlock","tableRowCardsList","answer","tableCardsList","modal","modalContent","wrapper","image","errorText","back","mainBlock","formBlock","titleFormBlock","formBlockInput","footerBlock","footerFormBlock","checkbox","defaultButton","defaultInput","labelInput","preloader","loader","error","checkEmail","logo","headerContainer","headerMenu","paginatorBlock","selectedPage","__webpack_require__","p","profile","Logo","react_default","a","createElement","className","style","src","alt","Header","common_Logo","react_router_dom","to","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","email","password","name","avatar","put","from","message","resetPasswordToken","packsApi","params","get","newNamePack","cardsPack","deckCover","private","packId","concat","updateNamePack","_id","cardApi","cardsPack_id","cardsPackId","questionCard","card","question","cardId","initialState","userData","publicCardPacksCount","isAdmin","verified","rememberMe","setUserDataAC","type","payload","isLoggedIn","isLoggedInAC","isError","loginTC","dispatch","setStatusAC","then","res","catch","err","response","setTimeout","isInitialized","status","setIsErrorAppAC","initializeAppTC","finally","Preloader","EditableSpan","React","memo","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","value","_useState4","title","setTitle","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","ModalProfile","styles","onClick","setActive","stopPropagation","children","Profile","useEffect","userName","useSelector","state","userAvatar","login","app","setName","setAvatar","_useState5","_useState6","modalActive","setModalActive","useDispatch","Preloader_Preloader","Profile_ModalProfile","updatedUser","updateUserDateTC","react_router","Login","setEmail","setPassword","setRememberMe","event","checked","registrationTC","console","log","Registration","password1","setPassword1","placeholder","isSendPassword","createNewPasswordTC","token","Reset","reset","useParams","Error404","image404","isSendInstruction","forgotPasswordTC","ForgotPassword","isSendInstructionAC","forgot","logoEmail","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","min","max","page","pageCount","sortPacks","packName","user_id","setUserIdAC","userId","sortPackAC","sort","getPacksListsTC","getState","packs","Pagination","_ref","_ref$portionSize","portionSize","objectWithoutProperties","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","OnChangeCurrentPage","numberPage","filter","map","PacksList","activeButton","setActiveButton","nameNewPack","setNameNewPack","_useState7","_useState8","updatePackName","setUpdatePackName","_useState9","_useState10","IdPackName","setIdPackName","Fragment","el","key","cardsCount","updated","user_name","Paginator_Pagination","cards","cardsTotalCount","packUserId","cardAnswer","cardQuestion","getCardsListsTC","CardsList","id","setQuestionCard","updateQuestion","setUpdateQuestion","updateAnswer","setUpdateAnswer","IdCard","setIdCard","addCardTC","grade","AllRoutes","path","element","Profile_Profile","Login_Login","Registration_Registration","Packs_PacksList","Cards_CardsList","ForgotPassword_ForgotPassword","ResetPassword_Reset","Page404","App","Header_Header","AllRoutes_AllRoutes","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","pack","store","createStore","applyMiddleware","thunk","window","ReactDOM","createRoot","document","getElementById","render","es","src_App"],"mappings":"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","file":"static/js/main.36ade64b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"packsListBlock\":\"PacksList_packsListBlock__2GqJ2\",\"tablePacksList\":\"PacksList_tablePacksList__1HcLr\",\"tableRowPacksList\":\"PacksList_tableRowPacksList__34oIB\",\"packsListLeft\":\"PacksList_packsListLeft__2WEA-\",\"packsListRight\":\"PacksList_packsListRight__HbVLX\",\"btnPacksList\":\"PacksList_btnPacksList__284QN\",\"active\":\"PacksList_active__3Mj9x\",\"defaultButton1\":\"PacksList_defaultButton1__2kKwR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsListBlock\":\"CardsList_cardsListBlock__25MRI\",\"tableRowCardsList\":\"CardsList_tableRowCardsList__1y_Uz\",\"answer\":\"CardsList_answer__3aAN4\",\"tableCardsList\":\"CardsList_tableCardsList__RPrc1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__2Bpo5\",\"active\":\"Modal_active__20HM-\",\"modalContent\":\"Modal_modalContent__1Ib2r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Error404_wrapper__6QRdJ\",\"image\":\"Error404_image__1tgfK\",\"errorText\":\"Error404_errorText__DB3_j\",\"back\":\"Error404_back__MQN98\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"App_mainBlock__2HF24\",\"formBlock\":\"App_formBlock__1zaAh\",\"titleFormBlock\":\"App_titleFormBlock__3ZC75\",\"formBlockInput\":\"App_formBlockInput__2Z6wr\",\"footerBlock\":\"App_footerBlock__1vnFk\",\"footerFormBlock\":\"App_footerFormBlock__2ndWh\",\"checkbox\":\"App_checkbox___ETUF\",\"defaultButton\":\"App_defaultButton__12b8P\",\"defaultInput\":\"App_defaultInput__2Pgcg\",\"labelInput\":\"App_labelInput__2orqK\",\"preloader\":\"App_preloader__3v5n2\",\"loader\":\"App_loader__2oKrW\",\"error\":\"App_error__28HgU\",\"checkEmail\":\"App_checkEmail__3xmvW\",\"logo\":\"App_logo__2UF9l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__1Ta32\",\"headerMenu\":\"Header_headerMenu__2eVCJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorBlock\":\"Pagination_paginatorBlock__1vWYM\",\"selectedPage\":\"Pagination_selectedPage__BShZ5\"};","module.exports = __webpack_public_path__ + \"static/media/cpLogo.4d8df5a9.png\";","module.exports = __webpack_public_path__ + \"static/media/Ellipsis.6cf03e7b.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2CJLi\"};","module.exports = __webpack_public_path__ + \"static/media/404.1340f194.png\";","module.exports = __webpack_public_path__ + \"static/media/4698238.068caec9.png\";","import React from 'react';\r\nimport logo from './assets/cpLogo.png'\r\nimport style from '../App.module.css'\r\n\r\n\r\n\r\nfunction Logo() {\r\n\r\n    return (\r\n        <div className=\"logo\">\r\n            <img className={style.logo} src={logo} alt=\"logo pet project\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;\r\n\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport style from './Header.module.css'\r\nimport Logo from \"../Logo\";\r\n\r\nfunction Header() {\r\n\r\n    return (\r\n        <div className={style.headerContainer}>\r\n            <Logo/>\r\n            <nav className={style.headerMenu}>\r\n\r\n                <Link to={\"/login\"}>Login</Link>\r\n                <Link to={\"/profile\"}>Profile</Link>\r\n                <Link to={\"/registration\"}>Registration</Link>\r\n                <Link to={\"/forgot\"}>ForgotPassword</Link>\r\n                <Link to={\"/packsList\"}>PacksList</Link>\r\n                {/*<Link to={\"/reset\"}>Reset</Link>*/}\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL:'https://neko-back.herokuapp.com/2.0/',\r\n       /* baseURL: process.env.REACT_APP_BACK_URL || 'http://localhost:7542/2.0/',*/\r\n        withCredentials: true,\r\n    })\r\n\r\n// baseURL: 'https://neko-back.herokuapp.com/2.0/'\r\n//http://localhost:7542/2.0/\r\n\r\n\r\n// api\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n      return instance.post<LoginResponseType>('/auth/login', data)\r\n    },\r\n    authMe(){\r\n        return instance.post<LoginResponseType>('/auth/me',{})\r\n    },\r\n    logout(){\r\n        return instance.delete<logOutType>('auth/me')\r\n    },\r\n    registration(email: string, password: string){\r\n        return instance.post('auth/register', {email, password})\r\n    },\r\n    updateUserData(name:string, avatar: string) {\r\n        return instance.put('auth/me', {name,avatar})\r\n    },\r\n    forgotPassword(email: string) {\r\n            return instance.post<ForgotDataType>('/auth/forgot', {\r\n            email, from: '<maryia.jegorova@gmail.com>',\r\n                message: `<div style=\"background-color: #d0eca1; padding: 20px; border-radius: 15px\">This is a password recovery link: <a href='https://MariStakhovskaya.github.io/questionCards/#/reset/$token$'>link</a></div>`\r\n        })\r\n    },\r\n    createNewPassword(password: string, resetPasswordToken: string){\r\n        return instance.post('/auth/set-new-password',{password, resetPasswordToken})\r\n    }\r\n}\r\n\r\nexport const packsApi = {\r\n    getPacksList(params: PacksParamsType){\r\n        return instance.get<PacksListResponseType>(('/cards/pack'), {params})},\r\n\r\n    addNewPack(newNamePack: string){\r\n        return instance.post('/cards/pack',  {\r\n            cardsPack: {\r\n                name: newNamePack,\r\n                deckCover: '',\r\n                private: false\r\n            }\r\n        })\r\n    },\r\n    deleteMyPack(packId: string){\r\n            return instance.delete(`cards/pack?id=${packId}`)\r\n    },\r\n    updateMyPack(packId: string, updateNamePack: string){\r\n        return instance.put('cards/pack', {\r\n            cardsPack: {\r\n                name: updateNamePack,\r\n                deckCover: '',\r\n                private: false,\r\n                _id: packId\r\n            }\r\n        })\r\n    }}\r\n\r\nexport const cardApi = {\r\n    getCardsList(cardsPack_id: string, params:CardsParamsType){\r\n        return instance.get(`/cards/card?cardsPack_id=${cardsPack_id}`,{params})},\r\n\r\n    addCard(cardsPackId:string,questionCard: string){\r\n        return instance.post('/cards/card',{\r\n            card: {\r\n                cardsPack_id:cardsPackId,\r\n                question:questionCard\r\n            }\r\n        })\r\n    },\r\n    deleteCard(cardId: string){\r\n        return instance.delete( `/cards/card?id=${cardId}`)\r\n    },\r\n    updateCard(cardId: string, question: string, answer: string){\r\n        return instance.put('/cards/card', {\r\n            card: {\r\n                _id: cardId,\r\n                question: question,\r\n                answer: answer\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// types\r\n\r\nexport type AddPackParamsType = {\r\n    cardsPack: {\r\n        name: string\r\n        deckCover?: string\r\n        private?: boolean\r\n        packId?: string\r\n    }\r\n}\r\n\r\nexport type PacksParamsType = {\r\n    min: number,\r\n    max: number,\r\n    page: number,\r\n    pageCount: number,\r\n    sortPacks: string,\r\n    packName: string,\r\n    user_id: string}\r\n\r\nexport type CardsParamsType= {\r\n    cardAnswer?:string,\r\n        cardQuestion?: string,\r\n        cardsPack_id?:string ,\r\n        min?: number,\r\n        max?: number,\r\n        page?: number,\r\n        pageCount?: number\r\n}\r\n\r\ntype cardType = \"pack\" | \"folder\"\r\n\r\nexport type CardPacksType = {\r\n    _id: string,\r\n    user_id:string,\r\ncardsCount: number\r\ncreated: string\r\ngrade: number // средняя оценка карточек\r\nmore_id: string\r\nname: string\r\npath: string // папка\r\nprivate: false\r\nrating: number // лайки\r\nshots: number // количество попыток\r\ntype: cardType\r\nupdated: string\r\nuser_name: string\r\n__v: number\r\n}\r\n\r\n\r\ntype PacksListResponseType = {\r\n    cardPacks:CardPacksType[],\r\n    cardPacksTotalCount: number // количество колод\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number // выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n}\r\n\r\n\r\ntype logOutType = {\r\n    info: string,\r\n    error: string\r\n}\r\n\r\nexport type ForgotDataType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n}\r\n\r\nexport type LoginResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: string;\r\n    updated: string;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error: string;\r\n\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginResponseType} from \"../../api/cards-api\";\r\nimport {setStatusAC} from \"../../app/app-reducer\";\r\nimport {AppActionsType} from \"../../redux/store\";\r\nimport {isError} from \"../Login/login-reducer\";\r\n\r\nconst initialState = {\r\n    userData: {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: '',\r\n    publicCardPacksCount: 0, // количество колод\r\n    isAdmin: false,\r\n    verified: false, // подтвердил ли почту\r\n    rememberMe: false,\r\n    error: ''}\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET_USER\":\r\n            return {...state,\r\n        ... action.payload}\r\n        case \"UPDATE-USER-DATA\":\r\n            return {...state,\r\n                userData:{...state.userData,\r\n                    ...action.payload}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setUserDataAC = (userData: LoginResponseType) => ({\r\n    type: 'login/SET_USER',\r\n    payload: {userData}\r\n} as const)\r\n\r\nexport const updateUserDateAC = (name: string, avatar: string) => ({\r\n    type: 'UPDATE-USER-DATA',\r\n    payload: {name,avatar}\r\n} as const)\r\n\r\n\r\n// thunk\r\n\r\nexport const updateUserDateTC = (name:string, avatar: string) => (dispatch: Dispatch<AppActionsType>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    authAPI.updateUserData(name, avatar)\r\n        .then((res)=>{\r\n            dispatch(updateUserDateAC(res.data.updatedUser.name, res.data.updatedUser.avatar))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error\r\n                : (err.message + ', more details in the console');\r\n            dispatch(isError(error))\r\n            setTimeout(() => {\r\n                dispatch(isError(''))\r\n            }, 3000)\r\n            dispatch(setStatusAC('failed'))})\r\n}\r\n\r\n\r\n//type\r\nexport type ProfileActionTypes = UpdateUserDataType  | SetUserDataType\r\n\r\nexport type UpdateUserDataType = ReturnType<typeof updateUserDateAC>\r\nexport type SetUserDataType = ReturnType<typeof setUserDataAC>","import { Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/cards-api\";\r\nimport {setStatusAC} from \"../../app/app-reducer\";\r\nimport {setUserDataAC} from \"../Profile/profile-reducer\";\r\nimport {AppActionsType, AppThunkType} from \"../../redux/store\";\r\n\r\n\r\n\r\nconst initialState = {\r\n        isLoggedIn: false,\r\n         error: ''\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'login/IS-LOGGED-IN':\r\n            return {...state, isLoggedIn:action.isLoggedIn}\r\n        case \"login/SET_ERROR\":\r\n            return {...state, error: action.error }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const isLoggedInAC = (isLoggedIn: boolean) => (\r\n    {type: 'login/IS-LOGGED-IN', isLoggedIn} as const)\r\n\r\nexport const isError = (error: string) => (\r\n    {type: 'login/SET_ERROR', error} as const)\r\n\r\n\r\n\r\n// thunk\r\nexport const loginTC = (data: LoginParamsType):AppThunkType => (dispatch: Dispatch<AppActionsType>) => {\r\n        dispatch(setStatusAC('loading'))\r\n        authAPI.login(data)\r\n            .then((res) => {\r\n                dispatch(isLoggedInAC(true))\r\n                dispatch(setUserDataAC(res.data))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                    const error = err.response\r\n                        ? err.response.data.error\r\n                        : (err.message + ', more details in the console');\r\n                dispatch(isError(error))\r\n                setTimeout(() => {\r\n                    dispatch(isError(''))\r\n                }, 3000)\r\n                dispatch(setStatusAC('failed'))\r\n\r\n            })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<AppActionsType>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then((res)=>{\r\n            dispatch(isLoggedInAC(false))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error\r\n                : (err.message + ', more details in the console');\r\n            dispatch(isError(error))\r\n            dispatch(setStatusAC('failed'))\r\n\r\n        })\r\n}\r\n\r\n//type\r\nexport type LoginActionsType = IsLoggedInType  | IsErrorType\r\n\r\nexport type IsLoggedInType = ReturnType<typeof isLoggedInAC>\r\nexport type IsErrorType = ReturnType<typeof isError>\r\n","import {authAPI} from \"../api/cards-api\";\r\nimport { isLoggedInAC} from \"../features/Login/login-reducer\";\r\nimport {setUserDataAC} from \"../features/Profile/profile-reducer\";\r\nimport {AppActionsType, AppThunkType} from \"../redux/store\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    isInitialized: false,\r\n    status: 'idle' as RequestStatusType,\r\n    error: ''\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\nexport const setIsErrorAppAC = (error: string) => ({type: 'APP/ERROR', error} as const)\r\nexport const setStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\n\r\n\r\n// thunk\r\nexport const initializeAppTC = (): AppThunkType => (dispatch) => {\r\n\r\n    authAPI.authMe().then(res => {\r\n\r\n            dispatch(setUserDataAC(res.data))\r\n        dispatch(isLoggedInAC(true))\r\n    })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error\r\n                : (err.message + ', more details in the console');\r\n            dispatch(setIsErrorAppAC(error))\r\n            setTimeout(() => {\r\n                dispatch(setIsErrorAppAC(''))\r\n            }, 5000)\r\n            dispatch(setStatusAC('failed'))\r\n\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true));\r\n        })\r\n}\r\n\r\n/*\r\nexport const initializeAppTC = (): AppThunkType => async (dispatch) => {\r\n    try{\r\n        const res = await authAPI.authMe()\r\n        if (res.status === 200) {\r\n            dispatch(setUserDataAC(res.data.data))\r\n            dispatch(isLoggedInAC(true))\r\n\r\n        }\r\n    }\r\n\r\n   catch (e) {\r\n\r\n   }\r\n   finally {\r\n        dispatch(setIsInitializedAC(true));\r\n    }\r\n    }\r\n*/\r\n\r\n\r\n\r\n//type\r\nexport type AppReducerActionType = SetStatusACType | SetIsInitializedACType | SetIsErrorAppACType\r\n\r\nexport type SetIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\nexport type SetIsErrorAppACType = ReturnType<typeof setIsErrorAppAC>\r\nexport type SetStatusACType = ReturnType<typeof setStatusAC>\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport preloader from './Ellipsis.gif'\r\nimport style from '../../App.module.css'\r\n\r\n\r\n\r\nfunction Preloader() {\r\n\r\n    return (\r\n        <div className=\"preloader\">\r\n           <img className={style.loader} src={preloader} alt=\"preloader\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preloader;\r\n\r\n","\r\nimport React, { ChangeEvent, useState } from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string ) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n   let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        props.onChange(title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        setTitle(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChange(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <input value={props.value} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n\r\n})\r\n","import React from 'react';\r\nimport  styles from './Modal.module.css';\r\n\r\n\r\ntype ModalProfilePropsType = {\r\n    active: boolean\r\n    setActive: (active:boolean) => void\r\n    children: any\r\n}\r\n\r\nconst ModalProfile = React.memo((props:ModalProfilePropsType) => {\r\n\r\n    return (\r\n        <div className={props.active ?  `${styles.modal} ${styles.active}` : styles.modal} onClick={()=> props.setActive(false)}>\r\n            <div className={props.active ?  `${styles.modalContent} ${styles.active}` : styles.modalContent} onClick={(e)=>e.stopPropagation()}>\r\n                {props.children}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\nexport default ModalProfile\r\n","import React, { useEffect, useState} from 'react';\r\nimport '../../App.module.css';\r\nimport styles from './Profile.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState, TypeDispatch} from \"../../redux/store\";\r\nimport {logoutTC} from \"../Login/login-reducer\";\r\nimport { Navigate } from 'react-router-dom';\r\nimport { updateUserDateTC} from \"./profile-reducer\";\r\nimport {EditableSpan} from \"../../common/EditableSpan\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ModalProfile from \"./ModalProfile\";\r\n\r\n\r\n\r\n const Profile = React.memo(() => {\r\n\r\n\r\n     useEffect( () => {\r\n         if (!isLoggedIn){\r\n             return\r\n         }\r\n\r\n     },[])\r\n\r\n     const userName = useSelector<AppRootState, string>(state => state.profile.userData.name)\r\n     const userAvatar = useSelector<AppRootState, string>(state => state.profile.userData.avatar)\r\n     const isLoggedIn = useSelector<AppRootState, boolean>(state => state.login.isLoggedIn)\r\n     const status = useSelector<AppRootState, string>(state => state.app.status)\r\n\r\n     let [name, setName] = useState(userName);\r\n     let [avatar, setAvatar] = useState(userAvatar);\r\n     const [modalActive, setModalActive] = useState(false)\r\n\r\n\r\n     const dispatch = useDispatch<TypeDispatch>()\r\n\r\n     const onClickLogoutHandler = () => {\r\n         dispatch(logoutTC())\r\n     }\r\n\r\n\r\n     const onClickUpdateData = () => {\r\n         dispatch(updateUserDateTC(name,avatar))\r\n         setModalActive(false)\r\n     }\r\n\r\n\r\n     if (!isLoggedIn) {\r\n         return <Navigate to={'/login'}/>\r\n     }\r\n\r\n     return (\r\n         <div className={styles.profile}>\r\n             {status === 'loading' && <Preloader/>}\r\n             <img src={userAvatar} alt={''}/>\r\n             <br/>\r\n            {/*avatar URL: {userAvatar}*/}\r\n             <br/>\r\n             name: {userName}\r\n            {/* avatar url:  <EditableSpan value={avatar}  onChange={setAvatar} />\r\n             <br/>\r\n             name: <EditableSpan value={name} onChange={setName}/>*/}\r\n             <br/>\r\n             <button onClick={()=> setModalActive(true)}>Update Profile</button>\r\n\r\n             <br/>\r\n             <button onClick={onClickLogoutHandler}>Logout</button>\r\n             <ModalProfile active={modalActive} setActive={setModalActive}>\r\n                 avatar url:  <EditableSpan value={avatar}  onChange={setAvatar} />\r\n                 <br/>\r\n                 <br/>\r\n                 name: <EditableSpan value={name} onChange={setName}/>\r\n                 <br/>\r\n                 <button onClick={onClickUpdateData}>save</button>\r\n             </ModalProfile>\r\n\r\n         </div>\r\n     );\r\n })\r\n\r\n\r\nexport default Profile;\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport style from '../../App.module.css';\r\n\r\nimport {isError, loginTC} from \"./login-reducer\";\r\nimport {AppRootState, TypeDispatch} from \"../../redux/store\";\r\nimport {Link, Navigate} from 'react-router-dom';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport Logo from \"../../common/Logo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nfunction Login() {\r\n\r\n    const [email, setEmail] = useState('maria.stachovski.de@gmail.com')\r\n    const [password, setPassword] = useState('123456780')\r\n    const [rememberMe, setRememberMe] = useState(false)\r\n\r\n    const dispatch = useDispatch<TypeDispatch>()\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.login.isLoggedIn)\r\n    const isError = useSelector<AppRootState, string>(state => state.login.error)\r\n    const status = useSelector<AppRootState, string>(state => state.app.status)\r\n\r\n    if (isLoggedIn){\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(event.currentTarget.value)\r\n\r\n    }\r\n    const onChangeInputPassHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.currentTarget.value)\r\n    }\r\n    const onChangeInputCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setRememberMe(event.currentTarget.checked)\r\n    }\r\n\r\n    const onClickButtonHandler = () => {\r\n        dispatch(loginTC({email, password, rememberMe}))\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.formBlock}>\r\n            <div className={style.titleFormBlock}>\r\n                    <Logo/>\r\n                <h3>Login</h3>\r\n            </div>\r\n            {status === 'loading' && <Preloader/>}\r\n            <div className={style.formBlockInput}>\r\n                <input className={style.defaultInput} value={email} onChange={onChangeInputHandler}/>\r\n                <input className={style.defaultInput} type={\"password\"} value={password}\r\n                       onChange={onChangeInputPassHandler}/>\r\n\r\n                <div className={style.error}>{isError}</div>\r\n\r\n                <label className={style.checkbox}>\r\n                    <input type={\"checkbox\"} name=\"RememberMe\" onChange={onChangeInputCheckbox}/>RememberMe\r\n                </label>\r\n                <button className={style.defaultButton} onClick={onClickButtonHandler}>Login</button>\r\n\r\n            </div>\r\n            <div className={style.footerFormBlock}>\r\n                <p><Link to={\"/forgot\"}>ForgotPassword</Link></p>\r\n                <p>Don't have an account?</p>\r\n                <p><Link to={\"/registration\"}>Sign up</Link></p>\r\n            </div>\r\n           {/* {isLoggedIn && (<Navigate to={'/profile'}/>)}*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/cards-api\";\r\nimport {isError, isLoggedInAC} from \"../Login/login-reducer\";\r\nimport {AppActionsType} from \"../../redux/store\";\r\nimport {setStatusAC} from \"../../app/app-reducer\";\r\n\r\nconst initialState = {\r\n    email: '',\r\n    password: '',\r\n    error: ''\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"REGISTRATION\":\r\n            return {...state, email: action.email, password: action.password}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const registrationAC = (email: string, password: string) => (\r\n    {type: 'REGISTRATION', email, password} as const)\r\n\r\n\r\n// thunk\r\n\r\nexport const registrationTC = (email: string, password: string) => (dispatch: Dispatch<AppActionsType>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    authAPI.registration(email, password)\r\n        .then((res) => {\r\n            dispatch(setStatusAC('succeeded'))\r\n            dispatch(isLoggedInAC(true))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error\r\n                : (err.message + ', more details in the console');\r\n            console.log(error)\r\n            dispatch(isError(error))\r\n            setTimeout(() => {\r\n                dispatch(isError(''))\r\n            }, 3000)\r\n            dispatch(setStatusAC('failed'))\r\n        })\r\n}\r\n\r\n//type\r\nexport type RegistrationActionsType = RegistrationType\r\nexport type RegistrationType = ReturnType<typeof registrationAC>\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport style from '../../App.module.css';\r\nimport {registrationTC} from \"./regist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState, TypeDispatch} from \"../../redux/store\";\r\nimport { Navigate } from 'react-router-dom';\r\nimport {isError} from \"../Login/login-reducer\";\r\nimport Logo from \"../../common/Logo\";\r\n\r\nfunction Registration() {\r\n\r\n    const dispatch = useDispatch<TypeDispatch>()\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [password1, setPassword1] = useState('')\r\n\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.login.isLoggedIn)\r\n    const error = useSelector<AppRootState, string>(state => state.login.error)\r\n\r\n\r\n    const onChangeHandlerEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeHandlerPass = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n    const onChangeHandlerPass1 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword1(e.currentTarget.value)\r\n    }\r\n\r\nconst onClickHandler = () => {\r\n        if (password != password1){\r\n            dispatch(isError('Password is not correct'))\r\n        } else {\r\n            dispatch(registrationTC(email,password))\r\n        }\r\n\r\n}\r\n\r\n    return (\r\n        <div className={style.formBlock}>\r\n            <div className={style.titleFormBlock}>\r\n              <Logo/>\r\n                <h4>Registration</h4>\r\n            </div>\r\n            <div className={style.formBlockInput}>\r\n\r\n <input className={style.defaultInput} value={email} placeholder={'Email'} onChange={onChangeHandlerEmail}  />\r\n\r\n\r\n    <input className={style.defaultInput} value={password} placeholder={'Password'} onChange={onChangeHandlerPass}   />\r\n\r\n\r\n                <input className={style.defaultInput} placeholder={'Confirm password'} value={password1} onChange={onChangeHandlerPass1}   />\r\n\r\n    <div className={style.error}>{error ? error : ''}</div>\r\n\r\n    <button className={style.defaultButton} onClick={onClickHandler}>Register</button>\r\n            </div>\r\n            <div className={style.footerFormBlock}>\r\n\r\n            </div>\r\n            {isLoggedIn && <Navigate to={'/login'}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Registration;\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/cards-api\";\r\nimport {AppActionsType} from \"../../redux/store\";\r\nimport {setStatusAC} from \"../../app/app-reducer\";\r\nimport {isError} from \"../Login/login-reducer\";\r\n\r\nconst initialState = {\r\n isSendPassword: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const resetReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'CREATE-NEW-PASSWORD':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const createNewPasswordAC = (isSendPassword: boolean) => ({\r\n    type:  \"CREATE-NEW-PASSWORD\",\r\n    payload: {isSendPassword} }as const)\r\n\r\n// thunk\r\n\r\nexport const createNewPasswordTC = (password: string, token: string) => (dispatch: Dispatch<AppActionsType>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    authAPI.createNewPassword(password, token)\r\n        .then(res => {\r\n            dispatch(createNewPasswordAC(true))\r\n            dispatch(setStatusAC('succeeded'))\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error\r\n                : (err.message + ', more details in the console');\r\n            dispatch(isError(error))\r\n            setTimeout(() => {\r\n                dispatch(isError(''))\r\n            }, 3000)\r\n            dispatch(setStatusAC('failed'))\r\n\r\n        })\r\n}\r\n\r\n//type\r\n\r\nexport type NewPasswordActionTypes = CreateNewPasswordType\r\n export type CreateNewPasswordType = ReturnType<typeof createNewPasswordAC>","import React, {ChangeEvent, useState} from 'react';\r\nimport style from '../../App.module.css';\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {createNewPasswordTC} from \"./reset-reducer\";\r\nimport {AppRootState, TypeDispatch} from \"../../redux/store\";\r\nimport Logo from \"../../common/Logo\";\r\n\r\n\r\n\r\nfunction Reset() {\r\n\r\n    const [password, setPassword] = useState('')\r\n    const isSendPassword = useSelector<AppRootState, boolean>(state => state.reset.isSendPassword)\r\n    const isError = useSelector<AppRootState, string>(state => state.login.error)\r\n        const dispatch = useDispatch<TypeDispatch>()\r\n\r\n    const onChangeHandlerPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const {resetPasswordToken} = useParams<{resetPasswordToken:string}>()\r\n\r\n    const onClickHandler = () =>{\r\n        debugger\r\n        if (resetPasswordToken){\r\n            dispatch(createNewPasswordTC(password,resetPasswordToken))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.formBlock}>\r\n            <div className={style.titleFormBlock}>\r\n                <Logo />\r\n                <h5>Create new password</h5>\r\n            </div>\r\n            <div className={style.formBlockInput}>\r\n                <input className={style.defaultInput} placeholder={'New password'} value={password} onChange={onChangeHandlerPassword}  />\r\n\r\n                <p>Create new password and we will send you further instructions to email </p>\r\n                        <div>{isError}</div>\r\n                <button className={style.defaultButton} onClick={onClickHandler}>Create new password</button></div>\r\n            {isSendPassword && (<Navigate to={'/login'}/>)}\r\n\r\n            <div className={style.footerFormBlock}>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Reset;\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport image404 from '../assets/404.png'\r\nimport style from './Error404.module.css'\r\n\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <div className={style.image}><img src={image404}\r\n                                          alt=\"cat\"/></div>\r\n            <div className={style.errorText}>Oops, This page does not exist</div>\r\n            <button>  <NavLink to={'/profile'} className={style.back}>go to homepage</NavLink></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error404;","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../api/cards-api\";\r\nimport {isError} from \"../Login/login-reducer\";\r\nimport {setStatusAC} from \"../../app/app-reducer\";\r\nimport {AppActionsType} from \"../../redux/store\";\r\n\r\nconst initialState = {\r\n    email:'',\r\n    isSendInstruction: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const forgotPasswordReducer = (state: InitialStateType = initialState, action:AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'FORGOT-PASSWORD':\r\n            return {...state, ... action.payload}\r\n        case 'IS-SEND-INSTRUCTION':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\n\r\nexport const forgotPasswordAC = (email: string) => ({\r\n    type: 'FORGOT-PASSWORD',\r\n    payload: {email} } as const)\r\n\r\nexport const isSendInstructionAC = (isSendInstruction: boolean) => ({\r\n    type: 'IS-SEND-INSTRUCTION',\r\n    payload: {isSendInstruction} } as const)\r\n\r\n// thunk\r\n\r\nexport const forgotPasswordTC = (email: string) => ( dispatch: Dispatch<AppActionsType>) => {\r\n    dispatch(setStatusAC('loading'))\r\n    authAPI.forgotPassword(email)\r\n        .then(res => {\r\n            dispatch(isSendInstructionAC(true))\r\n            dispatch(setStatusAC('succeeded'))\r\n            console.log(res.data)\r\n        })\r\n        .catch(err => {\r\n            const error = err.response\r\n                ? err.response.data.error\r\n                : (err.message + ', more details in the console');\r\n            dispatch(isError(error))\r\n            setTimeout(() => {\r\n                dispatch(isError(''))\r\n            }, 3000)\r\n            dispatch(setStatusAC('failed'))\r\n\r\n        })\r\n}\r\n\r\n//type\r\nexport type ForgotPasswordActionsType = ForgotPasswordType | IsSendInstructionType\r\n\r\nexport type ForgotPasswordType = ReturnType<typeof forgotPasswordAC>\r\nexport type IsSendInstructionType = ReturnType<typeof isSendInstructionAC>","import React, {ChangeEvent, useState} from 'react';\r\nimport style from '../../App.module.css';\r\nimport {Link, Navigate} from \"react-router-dom\";\r\nimport {forgotPasswordTC} from \"./forgotPassword-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState, TypeDispatch} from \"../../redux/store\";\r\nimport logoEmail from \"../../common/assets/4698238.png\";\r\nimport Logo from \"../../common/Logo\";\r\n\r\n\r\nfunction ForgotPassword() {\r\n\r\n    const [email, setEmail] = useState('')\r\n\r\n    const isSendInstructionAC = useSelector<AppRootState, boolean>(state => state.forgot.isSendInstruction)\r\n    const isError = useSelector<AppRootState, string>(state => state.login.error)\r\n\r\n    const dispatch = useDispatch<TypeDispatch>()\r\n\r\n    const onChangeHandlerEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n    const onClickHandler = () => {\r\n        dispatch(forgotPasswordTC(email))\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {isSendInstructionAC ? <div className={style.formBlock}>\r\n                    <div className={style.titleFormBlock}>\r\n                        <Logo />\r\n                        <h4>Check Email</h4>\r\n                        <div><img className={style.checkEmail} src={logoEmail} alt={'email'}/></div>\r\n                    </div>\r\n\r\n                    <div className={style.footerFormBlock}>\r\n                        <div>We’ve sent an Email with instructions to {email}</div>\r\n                    </div>\r\n                </div>\r\n                : <div className={style.formBlock}>\r\n                    <div className={style.titleFormBlock}>\r\n                       <Logo />\r\n                        <h4>Forgot your password?</h4>\r\n                    </div>\r\n                    <div className={style.formBlockInput}>\r\n                        <input className={style.defaultInput} placeholder={'Email'} value={email} onChange={onChangeHandlerEmail}/>\r\n\r\n                        <p>Enter your email address and we will send you further instructions</p>\r\n                        <div className={style.error}>{isError}</div>\r\n                        <button className={style.defaultButton} onClick={onClickHandler}>Send instruction</button>\r\n                    </div>\r\n                    {isSendInstructionAC && (<Navigate to={'/check'}/>)}\r\n\r\n                    <div className={style.footerFormBlock}>\r\n                        <p>Did you remember your password?</p>\r\n                        <p><Link to={\"/login\"}> Try logging in</Link></p>\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForgotPassword;\r\n\r\n","import {CardPacksType, packsApi, PacksParamsType} from \"../../api/cards-api\";\r\nimport {setStatusAC} from \"../../app/app-reducer\";\r\nimport {AppActionsType, AppRootState, AppThunkType} from \"../../redux/store\";\r\nimport {isError} from \"../Login/login-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst initialState = {\r\n    cardPacks: [] as CardPacksType[],\r\n    cardPacksTotalCount: 14, // количество колод\r\n    maxCardsCount: 4,\r\n    minCardsCount: 4,\r\n\r\n    params: {\r\n        min: 0,\r\n        max: 10,\r\n        page: 1,\r\n        pageCount: 10, // Количество элементов на странице\r\n        sortPacks: '0updated',\r\n        packName: '',\r\n        user_id: ''\r\n    } as PacksParamsType,\r\n\r\n\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"packs/SET-PACKS-LIST\":\r\n            return {...state,\r\n                cardPacks: action.packs.map(pack => ({...pack}))\r\n            }\r\n        case \"packs/SET-USER-ID\":\r\n            return {...state,params: {...state.params, user_id: action.userId}\r\n                }\r\n        case 'packs/SET-CARD-PACK-TOTAL-COUNT':\r\n            return {...state,cardPacksTotalCount: action.cardPacksTotalCount}\r\n        case 'packs/SET-CURRENT-PAGE':\r\n            return {...state,params:{...state.params, page: action.page}}\r\n        case 'packs/SORT-PACK':\r\n            return {...state,params:{...state.params, sortPacks: action.sort}}\r\n       /* case \"packs/ADD-NEW-PACK\":\r\n            return {...state,\r\n                cardPacks: [ action.pack, ...state.cardPacks]}*/\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setPacksListAC = (packs:CardPacksType[]) => ({\r\n    type:'packs/SET-PACKS-LIST', packs\r\n} as const)\r\nexport const addNewPackAC = (pack: CardPacksType) => ({\r\n    type:'packs/ADD-NEW-PACK', pack\r\n} as const)\r\n\r\nexport const setUserIdAC = (userId:string) => ({\r\n    type:'packs/SET-USER-ID', userId\r\n} as const)\r\nexport const setCardPackTotalCountAC = (cardPacksTotalCount:number) => ({\r\n    type:'packs/SET-CARD-PACK-TOTAL-COUNT', cardPacksTotalCount\r\n} as const)\r\nexport const setCurrentPageAC = (page:number) => ({\r\n    type:'packs/SET-CURRENT-PAGE', page\r\n} as const)\r\nexport const deleteUserPackIdAC = (userId:string) => ({\r\n    type:'packs/DELETE-USER-PACK', userId\r\n} as const)\r\nexport const sortPackAC = (sort: string) => ({\r\n    type:'packs/SORT-PACK', sort\r\n} as const)\r\n\r\n\r\n// thunk\r\nexport const getPacksListsTC = ():AppThunkType => {\r\n    return (dispatch: Dispatch<AppActionsType>, getState: ()=> AppRootState ) => {\r\n\r\n        dispatch(setStatusAC('loading'))\r\n        const params = getState().packs.params\r\n        packsApi.getPacksList(params)\r\n            .then((res) => {\r\n\r\n                dispatch(setPacksListAC(res.data.cardPacks))\r\n                dispatch(setCardPackTotalCountAC(res.data.cardPacksTotalCount))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                const error = err.response\r\n                    ? err.response.data.error\r\n                    : (err.message + ', more details in the console');\r\n                dispatch(isError(error))\r\n                setTimeout(() => {\r\n                    dispatch(isError(''))\r\n                }, 3000)\r\n                dispatch(setStatusAC('failed'))\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport const addNewPackTC = (newNamePack: string):AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        packsApi.addNewPack(newNamePack)\r\n            .then((res) => {\r\n\r\n                dispatch(getPacksListsTC())\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                const error = err.response\r\n                    ? err.response.data.error\r\n                    : (err.message + ', more details in the console');\r\n                dispatch(isError(error))\r\n                setTimeout(() => {\r\n                    dispatch(isError(''))\r\n                }, 3000)\r\n                dispatch(setStatusAC('failed'))\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport const updatePackTC = (packId: string, updateNamePack: string):AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        packsApi.updateMyPack(packId,updateNamePack)\r\n            .then((res) => {\r\n                dispatch(getPacksListsTC())\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                const error = err.response\r\n                    ? err.response.data.error\r\n                    : (err.message + ', more details in the console');\r\n                dispatch(isError(error))\r\n                setTimeout(() => {\r\n                    dispatch(isError(''))\r\n                }, 3000)\r\n                dispatch(setStatusAC('failed'))\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport const deleteUserPackTC = (packId: string):AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        packsApi.deleteMyPack(packId)\r\n            .then((res) => {\r\n                dispatch(getPacksListsTC())\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                const error = err.response\r\n                    ? err.response.data.error\r\n                    : (err.message + ', more details in the console');\r\n                dispatch(isError(error))\r\n                setTimeout(() => {\r\n                    dispatch(isError(''))\r\n                }, 3000)\r\n                dispatch(setStatusAC('failed'))\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//type\r\nexport type PacksListActionsType = SetPacksListType  | SetUserIdType | AddNewPackType  | SetCardPackTotalCountType | SetCurrentPageType |SortPackType\r\n\r\nexport type SetPacksListType = ReturnType<typeof setPacksListAC>\r\nexport type SetUserIdType = ReturnType<typeof setUserIdAC>\r\nexport type SetCardPackTotalCountType = ReturnType<typeof setCardPackTotalCountAC>\r\nexport type AddNewPackType = ReturnType<typeof addNewPackAC>\r\nexport type SetCurrentPageType = ReturnType<typeof setCurrentPageAC>\r\nexport type SortPackType = ReturnType<typeof sortPackAC>\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport style from './Pagination.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setCurrentPageAC} from \"../../features/Packs/packs-reducer\";\r\n\r\ntype PaginatorPropsType = {\r\n    cardPacksTotalCount: number,\r\n    pageCount: number,\r\n    page: number,\r\n    portionSize?: number\r\n}\r\n\r\nconst Pagination = React.memo(({portionSize = 10,...props}:PaginatorPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    let pagesCount = Math.ceil(props.cardPacksTotalCount/ props.pageCount) // Сколько всего страниц\r\n\r\n    let pages: Array<number> = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++)\r\n    {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount/portionSize)  // сколько всего получится порций страниц\r\n    let [portionNumber, setPortionNumber] = useState(1)  // Номер порции\r\n    let leftPortionPageNumber = (portionNumber-1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    const OnChangeCurrentPage =(numberPage: number) => {\r\n        dispatch(setCurrentPageAC(numberPage))\r\n    }\r\n\r\n    const onClickPrev = () => {\r\n        setPortionNumber(portionNumber-1)\r\n        {OnChangeCurrentPage(leftPortionPageNumber -portionSize)\r\n    }}\r\n\r\n    const onClickNext = () => {\r\n        setPortionNumber(portionNumber+1)\r\n        OnChangeCurrentPage(rightPortionPageNumber+1)}\r\n\r\n    return (\r\n        <div className={style.paginatorBlock}>\r\n            {portionNumber >1 && <button onClick={onClickPrev}>PREV</button>}\r\n\r\n            {pages.filter(page => page >=leftPortionPageNumber && page<=rightPortionPageNumber)\r\n                .map(page => (\r\n                <span onClick={()=>{OnChangeCurrentPage(page)}} className={props.page === page ? style.selectedPage : ''}>{page}</span>\r\n                ))}\r\n\r\n            {portionCount > portionNumber && <button onClick={onClickNext}>NEXT</button>}\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Pagination;\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport styles from './PacksList.module.css'\r\nimport {\r\n    addNewPackTC,\r\n    deleteUserPackTC,\r\n    getPacksListsTC,\r\n    setUserIdAC, sortPackAC,\r\n    updatePackTC\r\n} from \"./packs-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState, TypeDispatch} from \"../../redux/store\";\r\nimport style from \"../../App.module.css\";\r\nimport {CardPacksType, PacksParamsType} from \"../../api/cards-api\";\r\nimport ModalProfile from \"../Profile/ModalProfile\";\r\nimport Pagination from \"../../common/Paginator/Pagination\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\n\r\n\r\n\r\nconst PacksList= React.memo(() =>{\r\n\r\n    const dispatch = useDispatch<TypeDispatch>()\r\n    const isError = useSelector<AppRootState, string>(state => state.app.error)\r\n    const packs = useSelector<AppRootState, Array<CardPacksType>>(state => state.packs.cardPacks)\r\n    const userId = useSelector<AppRootState, string>(state => state.profile.userData._id)\r\n    const isLoggedIn = useSelector<AppRootState, boolean>(state => state.login.isLoggedIn)\r\n    const cardPacksTotalCount = useSelector<AppRootState, number>(state => state.packs.cardPacksTotalCount)\r\n    const pageCount = useSelector<AppRootState, number>(state => state.packs.params.pageCount)\r\n    const page = useSelector<AppRootState, number>(state => state.packs.params.page)\r\n    const params = useSelector<AppRootState, PacksParamsType>(state => state.packs.params)\r\n    const status = useSelector<AppRootState, string>(state => state.app.status)\r\n\r\n\r\n\r\n    const [activeButton, setActiveButton] = useState(true)\r\n    const [nameNewPack, setNameNewPack] = useState('')\r\n    const [modalActive, setModalActive] = useState(false)\r\n    const [updatePackName, setUpdatePackName] = useState('')\r\n    const [IdPackName, setIdPackName] = useState('')\r\n\r\n    useEffect(() => {\r\n            setTimeout(() => {\r\n                dispatch(getPacksListsTC())\r\n            }, 2000)\r\n\r\n    }, [params])\r\n\r\n\r\n    const OnClickMyPacks = () => {\r\n        dispatch(setUserIdAC(userId))\r\n        setActiveButton(false)\r\n        dispatch(getPacksListsTC())\r\n    }\r\n\r\n    const OnClickAllPacks = () => {\r\n        setActiveButton(true)\r\n        dispatch(setUserIdAC(''))\r\n        dispatch(getPacksListsTC())\r\n    }\r\n\r\n    const onClickSave = () => {\r\n        dispatch(addNewPackTC(nameNewPack))\r\n        setNameNewPack('')\r\n    }\r\n   const onChangeNameNewPack = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNameNewPack(e.currentTarget.value)\r\n   }\r\n\r\n   /* if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }*/\r\n\r\n    return (\r\n        <div className={styles.packsListBlock}>\r\n            <div className={styles.packsListLeft}>\r\n                <p>Show packs cards</p>\r\n                <div className={styles.btnPacksList}>\r\n                    <button onClick={OnClickMyPacks} className={!activeButton ? styles.active : ''}>My</button>\r\n                    <button onClick={OnClickAllPacks} className={activeButton ? styles.active : ''}>All</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={styles.packsListRight}>\r\n\r\n                <h2>Packs List</h2>\r\n                {status === 'loading' && <Preloader/>}\r\n                <div>\r\n                    {!isLoggedIn ?\r\n                        <div>\r\n                            <p>Empty</p>\r\n                            <p className={style.error}>{isError}</p>\r\n                        </div> : (<>\r\n                    <input value={nameNewPack} onChange={onChangeNameNewPack}/>\r\n                    <button onClick={onClickSave} className={styles.defaultButton1}>Add new pack</button>\r\n                            <div>\r\n                                <div className={styles.tablePacksList}>\r\n                                    <div className={styles.tableRowPacksList}>\r\n                                        <div>Name</div>\r\n                                        <div>Cards</div>\r\n                                        <div>Update<span onClick={()=>dispatch(sortPackAC('1updated'))}>▼</span><span onClick={()=>dispatch(sortPackAC('0updated'))}>⯅</span></div>\r\n                                        <div>Created by</div>\r\n                                        <div>Active</div>\r\n                                    </div>\r\n                                    {packs.map(el => (\r\n                                        <div key={el._id} className={styles.tableRowPacksList}>\r\n                                            <div>{el.name}</div>\r\n                                            <div>{el.cardsCount}</div>\r\n                                            <div>{el.updated}</div>\r\n                                            <div>{el.user_name}</div>\r\n                                            <div>\r\n                                                 {el.user_id === userId?\r\n                            <>\r\n                                <button onClick={()=>{dispatch(deleteUserPackTC(el._id))}}>Del</button>\r\n                                {modalActive?\r\n\r\n                                    <ModalProfile active={modalActive} setActive={setModalActive}>\r\n\r\n                                        <br/>\r\n                                        PackName: <input value={updatePackName} onChange={(e)=>{setUpdatePackName(e.currentTarget.value)}}/>\r\n                                        <br/>\r\n                                        <button onClick={()=>{\r\n                                            dispatch(updatePackTC(IdPackName, updatePackName))\r\n                                            setModalActive(false)\r\n                                        setUpdatePackName('')}}>save</button>\r\n                                    </ModalProfile>\r\n                                    :\r\n                                    <button onClick={\r\n                                        ()=>{setModalActive(true)\r\n                                            setUpdatePackName(el.name)\r\n                                            setIdPackName(el._id)\r\n                                            }}>Edit</button>}\r\n\r\n                                <NavLink to={`/cardsList/${el._id}`}>cards</NavLink>\r\n                            </>\r\n                            :  <NavLink to={`/cardsList/${el._id}`}>cards</NavLink>\r\n                        }\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    ))}\r\n\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <Pagination cardPacksTotalCount={cardPacksTotalCount} pageCount={pageCount} page={page}/>\r\n                                </div>\r\n                            </div></>)\r\n                    }\r\n\r\n\r\n                </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n)\r\n})\r\n\r\nexport default PacksList;\r\n\r\n","import {cardApi} from \"../../api/cards-api\";\r\nimport {setStatusAC} from \"../../app/app-reducer\";\r\nimport {AppActionsType, AppThunkType} from \"../../redux/store\";\r\nimport {isError} from \"../Login/login-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n    cards:[] as Array<CardType>,\r\n    cardsTotalCount: 5,\r\n    packUserId: '',\r\n    params: {\r\n        cardAnswer:'',\r\n        cardQuestion: '',\r\n        cardsPack_id: '',\r\n        min: 1 ,\r\n        max: 8,\r\n        page: 1,\r\n        pageCount: 7\r\n    }\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    debugger\r\n    switch (action.type) {\r\n        case \"cards/SET-CARDS-LIST\":\r\n            return {...state, cards: action.cards}\r\n\r\n        case 'cards/SET-CARDS-TOTAL-COUNT':\r\n            return {...state,cardsTotalCount: action.cardsTotalCount}\r\n        case 'cards/SET-CARDS-PAGE-COUNT':\r\n            return {...state, params: {...state.params, pageCount: action.pageCount}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\n\r\n\r\n\r\nexport const setCardsListAC = (cards:CardType[]) => ({\r\n    type:'cards/SET-CARDS-LIST', cards\r\n} as const)\r\nexport const setCardsTotalCountAC = (cardsTotalCount:number) => ({\r\n    type:'cards/SET-CARDS-TOTAL-COUNT', cardsTotalCount\r\n} as const)\r\nexport const setCardsPageCountAC = (pageCount:number) => ({\r\n    type:'cards/SET-CARDS-PAGE-COUNT', pageCount\r\n} as const)\r\n\r\n\r\n\r\n\r\n// thunk\r\nexport const getCardsListsTC = (cardsPack_id:string):AppThunkType => {\r\n    return (dispatch: Dispatch<AppActionsType>, getState ) => {\r\n        const params = getState().packs.params\r\n        dispatch(setStatusAC('loading'))\r\n\r\n        cardApi.getCardsList(cardsPack_id,params)\r\n            .then((res) => {\r\n\r\n                dispatch(setCardsListAC(res.data.cards))\r\n                dispatch(setCardsPageCountAC(res.data.cards.params.pageCount))\r\n            console.log(res.data.cards)\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                const error = err.response\r\n                    ? err.response.data.error\r\n                    : (err.message + ', more details in the console');\r\n                dispatch(isError(error))\r\n                setTimeout(() => {\r\n                    dispatch(isError(''))\r\n                }, 5000)\r\n                dispatch(setStatusAC('failed'))\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const addCardTC = (cardsPackId:string,questionCard: string):AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        cardApi.addCard(cardsPackId,questionCard)\r\n            .then((res) => {\r\n                dispatch(getCardsListsTC(cardsPackId))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                const error = err.response\r\n                    ? err.response.data.error\r\n                    : (err.message + ', more details in the console');\r\n                dispatch(isError(error))\r\n                setTimeout(() => {\r\n                    dispatch(isError(''))\r\n                }, 3000)\r\n                dispatch(setStatusAC('failed'))\r\n\r\n            })\r\n    }\r\n}\r\nexport const deleteCardTC = (cardId: string, cardsPackId:string):AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        cardApi.deleteCard(cardId)\r\n            .then((res) => {\r\n                dispatch(getCardsListsTC(cardsPackId))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                const error = err.response\r\n                    ? err.response.data.error\r\n                    : (err.message + ', more details in the console');\r\n                dispatch(isError(error))\r\n                setTimeout(() => {\r\n                    dispatch(isError(''))\r\n                }, 3000)\r\n                dispatch(setStatusAC('failed'))\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateCardTC = (cardId: string, cardsPackId:string, question: string, answer: string):AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        cardApi.updateCard(cardId, question,answer)\r\n            .then((res) => {\r\n                dispatch(getCardsListsTC(cardsPackId))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n            .catch(err => {\r\n                const error = err.response\r\n                    ? err.response.data.error\r\n                    : (err.message + ', more details in the console');\r\n                dispatch(isError(error))\r\n                setTimeout(() => {\r\n                    dispatch(isError(''))\r\n                }, 3000)\r\n                dispatch(setStatusAC('failed'))\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n//type\r\nexport type CardsListActionsType = SetCardsListType | SetCardsTotalCountType | SetCardsPageCountACType\r\n\r\nexport type SetCardsListType = ReturnType<typeof setCardsListAC>\r\nexport type SetCardsTotalCountType = ReturnType<typeof setCardsTotalCountAC>\r\nexport type SetCardsPageCountACType = ReturnType<typeof setCardsPageCountAC>\r\n\r\n\r\n\r\nexport type CardType = {\r\n            answer: string\r\n            question: string\r\n            cardsPack_id: string\r\n            grade: number\r\n            shots: number\r\n            user_id: string\r\n            created: string\r\n            updated: string\r\n            _id: string\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport styles from './CardsList.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState, TypeDispatch} from \"../../redux/store\";\r\nimport {CardsParamsType} from \"../../api/cards-api\";\r\nimport {addCardTC, CardType, deleteCardTC, getCardsListsTC, updateCardTC} from \"./cards-reducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport ModalProfile from \"../Profile/ModalProfile\";\r\nimport Pagination from \"../../common/Paginator/Pagination\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\n\r\n\r\n\r\nconst CardsList = React.memo(() => {\r\n\r\n    const dispatch = useDispatch<TypeDispatch>()\r\n    const isError = useSelector<AppRootState, string>(state => state.app.error)\r\n    const cards = useSelector<AppRootState, Array<CardType>>(state => state.cards.cards)\r\n    const params = useSelector<AppRootState, CardsParamsType>(state => state.cards.params)\r\n    const userId = useSelector<AppRootState, string>(state => state.profile.userData._id)\r\n    const cardsTotalCount = useSelector<AppRootState, number>(state => state.cards.cardsTotalCount)\r\n    const pageCount = useSelector<AppRootState, number>(state => state.cards.params.pageCount)\r\n    const page = useSelector<AppRootState, number>(state => state.cards.params.page)\r\n    const status = useSelector<AppRootState,string>(state=> state.app.status)\r\n\r\n    const {id} = useParams<{ id: string  }>()\r\n\r\n    const [questionCard, setQuestionCard] = useState('')\r\n    const [modalActive, setModalActive] = useState(false)\r\n    const [updateQuestion, setUpdateQuestion] = useState('')\r\n    const [updateAnswer, setUpdateAnswer] = useState('')\r\n    const [IdCard, setIdCard] = useState('')\r\n\r\n    useEffect(() => {\r\n            if(id){\r\n                dispatch(getCardsListsTC(id))\r\n            }\r\n    },[params,dispatch,])\r\n\r\n    const onChangeQuestionCard = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestionCard(e.currentTarget.value)\r\n    }\r\n    const onClickSave = () => {\r\n        if (id){\r\n            dispatch(addCardTC(id,questionCard))\r\n            setQuestionCard('')\r\n        }\r\n\r\n    }\r\n    /* if (!isLoggedIn) {\r\n         return <Navigate to={'/login'}/>\r\n     }*/\r\n\r\n    return (\r\n        <div className={styles.cardsListBlock}>\r\n            <h2>Cards List </h2>\r\n            <div>\r\n\r\n            <input value={questionCard} onChange={onChangeQuestionCard}/>\r\n            <button onClick={onClickSave} className={styles.defaultButton1}>Add new card</button>\r\n                {isError? isError : ''}\r\n                {status === 'loading' && <Preloader/>}\r\n            </div>\r\n            <div className={styles.tableCardsList}>\r\n                <div className={styles.tableRowCardsList}>\r\n                    <div>Question</div>\r\n                    <div className={styles.answer}>Answer</div>\r\n                    <div>Grade</div>\r\n                    <div>Active</div>\r\n                </div>\r\n                {cards.map(el => (\r\n                    <div key={el._id} className={styles.tableRowCardsList}>\r\n                        <div>{el.question}</div>\r\n                        <div className={styles.answer} >{el.answer}</div>\r\n                        <div>{el.grade}</div>\r\n                        {userId === el.user_id ?\r\n                            <>\r\n                                <button onClick={()=>{dispatch(deleteCardTC(el._id, el.cardsPack_id))}}>delete</button>\r\n                                {modalActive?\r\n\r\n                                    <ModalProfile active={modalActive} setActive={setModalActive}>\r\n\r\n                                        <br/>\r\n                                        Question: <input value={updateQuestion} onChange={(e)=>{setUpdateQuestion(e.currentTarget.value)}}/>\r\n                                       <br/>\r\n                                        Answer: <input value={updateAnswer} onChange={(e)=>{setUpdateAnswer(e.currentTarget.value)}}/>\r\n                                        <br/>\r\n                                        <button onClick={()=>{\r\n                                            dispatch(updateCardTC(IdCard, el.cardsPack_id,updateQuestion,updateAnswer ))\r\n                                            setModalActive(false)\r\n                                            setUpdateQuestion('')\r\n                                            setUpdateAnswer('')}}>save</button>\r\n                                    </ModalProfile>\r\n                                    :\r\n                                    <button onClick={\r\n                                        ()=>{setModalActive(true)\r\n                                            setUpdateQuestion(el.question)\r\n                                            setUpdateAnswer(el.answer)\r\n                                            setIdCard(el._id)\r\n                                        }}>Edit</button>}\r\n\r\n\r\n\r\n                            </> : ''}\r\n\r\n                    </div>\r\n                ))}\r\n<Pagination cardPacksTotalCount={cardsTotalCount} pageCount={pageCount} page={page}/>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n})\r\n\r\nexport default CardsList;\r\n\r\n","import {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport Profile from \"../../features/Profile/Profile\";\r\nimport Login from \"../../features/Login/Login\";\r\nimport Registration from \"../../features/Registration/Registration\";\r\nimport Reset from \"../../features/ResetPassword/Reset\";\r\nimport Error404 from \"../../common/Error404/Page404\";\r\nimport React from \"react\";\r\nimport ForgotPassword from \"../../features/ForgotPassword/ForgotPassword\";\r\nimport PacksList from \"../../features/Packs/PacksList\";\r\nimport CardsList from \"../../features/Cards/CardsList\";\r\n\r\n\r\nexport const AllRoutes = () => {\r\n    return (\r\n    <Routes>\r\n        <Route path=\"/\" element={<Profile />}/>\r\n        <Route path=\"login\" element={<Login/>}/>\r\n        <Route path=\"profile\" element={<Profile/>}/>\r\n        <Route path=\"registration\" element={<Registration/>}/>\r\n        <Route path=\"packsList\" element={<PacksList />}/>\r\n        <Route path=\"cardsList/:id\" element={<CardsList />}/>\r\n        <Route path=\"forgot\" element={<ForgotPassword />}/>\r\n        <Route path=\"reset/:resetPasswordToken\" element={<Reset />}/>\r\n        <Route path=\"404\" element={<Error404/>}/>\r\n        <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n    </Routes>)\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport style from './App.module.css';\r\nimport Header from \"./common/Header/Header\";\r\nimport {initializeAppTC} from \"./app/app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState, TypeDispatch} from \"./redux/store\";\r\nimport Preloader from \"./common/Preloader/Preloader\";\r\nimport {AllRoutes} from \"./app/Routes/AllRoutes\";\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch<TypeDispatch>()\r\n    const isInitialized = useSelector<AppRootState, boolean>( state => state.app.isInitialized)\r\n\r\n\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n   /* if (!isInitialized){\r\n        return <Preloader/>\r\n    }*/\r\n\r\n    return (\r\n        <div className={style.mainBlock}>\r\n            {!isInitialized && <Preloader/>}\r\n            <Header/>\r\n                <AllRoutes />\r\n                <footer className={style.footerBlock}>\r\n                @2022 cards training project\r\n                </footer>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport {appReducer, AppReducerActionType} from \"../app/app-reducer\";\r\nimport {LoginActionsType, loginReducer} from \"../features/Login/login-reducer\";\r\nimport {ProfileActionTypes, profileReducer} from \"../features/Profile/profile-reducer\";\r\nimport {NewPasswordActionTypes, resetReducer} from \"../features/ResetPassword/reset-reducer\";\r\nimport {ForgotPasswordActionsType, forgotPasswordReducer} from \"../features/ForgotPassword/forgotPassword-reducer\";\r\nimport {RegistrationActionsType} from \"../features/Registration/regist-reducer\";\r\nimport {PacksListActionsType, packsReducer} from \"../features/Packs/packs-reducer\";\r\nimport {CardsListActionsType, cardsReducer} from \"../features/Cards/cards-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login:loginReducer,\r\n    profile: profileReducer,\r\n    reset: resetReducer,\r\n    forgot: forgotPasswordReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n// Типизация экшн для всего апп\r\nexport type AppActionsType = LoginActionsType |\r\n    ProfileActionTypes |\r\n    AppReducerActionType |\r\n    ForgotPasswordActionsType |\r\n    RegistrationActionsType |\r\n    NewPasswordActionTypes |\r\n    PacksListActionsType |\r\n    CardsListActionsType\r\n\r\nexport type TypeDispatch = ThunkDispatch<AppRootState, any, AppActionsType>;\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootState, unknown, AppActionsType>\r\n\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/store\";\r\nimport { HashRouter} from \"react-router-dom\";\r\n\r\nconst root = ReactDOM.createRoot(\r\n    document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n\r\n                <App/>\r\n\r\n        </Provider>\r\n    </HashRouter>\r\n)\r\n;\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}